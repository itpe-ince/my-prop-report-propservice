package com.dnc.mprs.propservice.domain;

import static com.dnc.mprs.propservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PropertyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAllPropertiesEquals(Property expected, Property actual) {
        assertPropertyAutoGeneratedPropertiesEquals(expected, actual);
        assertPropertyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAllUpdatablePropertiesEquals(Property expected, Property actual) {
        assertPropertyUpdatableFieldsEquals(expected, actual);
        assertPropertyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAutoGeneratedPropertiesEquals(Property expected, Property actual) {
        assertThat(expected)
            .as("Verify Property auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyUpdatableFieldsEquals(Property expected, Property actual) {
        assertThat(expected)
            .as("Verify Property relevant properties")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getRegionCd()).as("check regionCd").isEqualTo(actual.getRegionCd()))
            .satisfies(e -> assertThat(e.getLocalName()).as("check localName").isEqualTo(actual.getLocalName()))
            .satisfies(e -> assertThat(e.getStreet()).as("check street").isEqualTo(actual.getStreet()))
            .satisfies(e -> assertThat(e.getFloor()).as("check floor").isEqualTo(actual.getFloor()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getArea()).as("check area").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getArea()))
            .satisfies(e -> assertThat(e.getRooms()).as("check rooms").isEqualTo(actual.getRooms()))
            .satisfies(e -> assertThat(e.getBathrooms()).as("check bathrooms").isEqualTo(actual.getBathrooms()))
            .satisfies(e -> assertThat(e.getBuildYear()).as("check buildYear").isEqualTo(actual.getBuildYear()))
            .satisfies(e -> assertThat(e.getParkingYn()).as("check parkingYn").isEqualTo(actual.getParkingYn()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyUpdatableRelationshipsEquals(Property expected, Property actual) {
        assertThat(expected)
            .as("Verify Property relationships")
            .satisfies(e -> assertThat(e.getComplex()).as("check complex").isEqualTo(actual.getComplex()));
    }
}
